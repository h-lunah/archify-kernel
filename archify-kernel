#!/usr/bin/env bash
set -e

# set up variables, these will be checked and used later
CURRENTBINARY=$(cat /proc/$$/comm)
CURRENTPATH=$PWD
KERNELPATH=$1
KERNELSUFFIX=$2
EXTRAOPTION=$3

# run the make command specified as fast as possible
makej() {
	make ARCH=x86_64 -j$(nproc) "$@"
}

# print a verbose message
msg() {
  printf "$CURRENTBINARY: $1\n"
}

# print usage if no parameters provided
if [[ -z "$KERNELPATH" || -z "$KERNELSUFFIX" ]]; then
  msg "usage: $CURRENTBINARY path_to_kernel_tree kernel_suffix\nexample: $CURRENTBINARY /path/to/linux-source hardened\nuse --no-config to not prompt for .config creation"
  exit 1
fi

# validate the tree
if ! stat $KERNELPATH &>/dev/null; then
  msg "$KERNELPATH: no such file or directory"
  exit 1
fi

if [[ -d "$KERNELPATH" ]]; then
  cd $KERNELPATH
  if ! makej -s kernelversion &>/dev/null; then
    msg "$KERNELPATH: not a linux kernel tree"
    exit 1
  fi
else
  msg "$KERNELPATH: can only patch a directory structure"
  exit 1
fi
cd $CURRENTPATH

# fetch kernel version from tree
msg "fetching kernel version..."
cd $KERNELPATH
echo "$(makej -s kernelversion)-$KERNELSUFFIX" > $CURRENTPATH/version
cd $CURRENTPATH

KERNELVERSION=$(grep -Po "[0-9]\.[0-9]{1,2}\.[0-9]{1,3}" version)
rm version

# determine if we have to patch this kernel, do this only with kernels 5.1 and older
if [ "$KERNELVERSION" = "$(echo -e "$KERNELVERSION\n5.1" | sort -V | head -n1)" ]; then
  msg "kernel detected is $KERNELVERSION<5.2.x, patching kernel features required by arch..."
  ( cd $KERNELPATH && patch -Np1 -i $CURRENTPATH/modinfo-lt52.patch || exit 0 )
else
  msg "kernel detected is $KERNELVERSION>=5.2.x, it will not be patched."
fi

# generate arch build system files
msg "generating arch build system files..."
source PKGBUILD.template
echo "-$pkgrel" > $KERNELPATH/localversion.10-pkgrel
echo "-$KERNELSUFFIX" > $KERNELPATH/localversion.20-pkgname

echo "$KERNELVERSION-$KERNELSUFFIX" > $KERNELPATH/version
echo "$(cat PKGBUILD.template | sed -e "s/{KERNELVERSION}/$KERNELVERSION/g" -e "s/{KERNELSUFFIX}/$KERNELSUFFIX/g")" > $KERNELPATH/PKGBUILD

LINE=$(grep -n 'include/config/kernel.release: $(srctree)/Makefile FORCE' $KERNELPATH/Makefile | grep -Po '^[^:]+' || test $? = 1; )
if [ -n "$LINE" ]; then
  sed -i "${LINE}s/ FORCE//g" $KERNELPATH/Makefile
else
  msg "warning: signature not found. this kernel may overwrite your patched version"
fi

cd $KERNELPATH
makej tinyconfig
makej prepare
echo "$KERNELVERSION-$KERNELSUFFIX" > include/config/kernel.release
echo "#define UTS_RELEASE \"$KERNELVERSION-$KERNELSUFFIX\"" > include/generated/utsrelease.h
rm .config
cd $CURRENTPATH

# tell the user to configure the kernel
if [ "$EXTRAOPTION" = "--no-config" ]; then
  :
elif [ -z "$EXTRAOPTION" ]; then
  msg "now configure your kernel. press any key to invoke configuration tool..."
  read -p ""
  cd $KERNELPATH
  makej menuconfig
else
  msg "warning: ignoring unrecognized option $EXTRAOPTION"
  msg "now configure your kernel. press any key to invoke configuration tool..."
  read -p ""
  cd $KERNELPATH
  makej menuconfig
fi

cd $CURRENTPATH

# check if the user made a config here or not, if not, tell them to put a .config later
if [ ! -f "$KERNELPATH/.config" ]; then
  msg "no .config for this $KERNELVERSION-$KERNELSUFFIX kernel was found, you are expected to put your own config now."
  exit 0
else
  msg "ready to build this $KERNELVERSION-$KERNELSUFFIX kernel"
fi

exit 0
